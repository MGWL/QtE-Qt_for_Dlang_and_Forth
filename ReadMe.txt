Главный файл qte.d - это основная библиотека
Все остальные файлы просто примеры. Некоторые могут не работать, так как написаны в разное время
для разных вариантов qte.d

После компиляци первый запуск полученной программы лучше выполнить с ключом --debug
-------
ffc.d и ff.d - это почти готовая утилита. Её задача, быстрый поиск в файловой
системе по имени файла. Алгоритм: ffc - создаёт индексный файл, ff - поиск по индексному файлу.
Создание индексного файла лучше всего выполнять с правами администратора (что бы всё проиндексировалось)
Пример создания индексного файла для Linux:
./ffc index.txt /
Создай индексный файл index.txt и обход дерева каталогов начни с корня

Для Windows:
ffc.exe index.txt c:\ d:\ e:\work
Создай индексный файл index.txt и обход дерева выполняй с c:\ d:\ e:\work 

ff (ff.exe) - работает с использованием файла индекса. По умолчанию это index.txt в текущем
каталоге. Сама программа использует Qt.

Данная программа хороша для быстрого поиска, особенно в Linux. Читаешь документацию, а там
ссылка на файл конфигурации типа mumu-kuku.conf. Соответственно ff на моём компьютере находит
за 2 сек все файлы в именах которых есть например "mumu" и "conf".

ff.d и ffc.d - проверялись (компилировались и тестировались) с qte.d в 32 и 64 разрядном режиме в Windows и Linux.
Набор ключей для компиляции есть в исходном тексте ff.d (в функции формирующей форму About...).
--------

errno.obj - Файл для компиляции d программ в Windows 64. 
Пример компиляции ff для win64: dmd -m64 ff.d asc1251.d qte.d errno.obj
Пример компиляции ff для lin64: dmd -m64 ff.d asc1251.d qte.d -L-ldl

Если есть вопросы, то можете спрашивать на форумах:
http://dlang.ru/
https://github.com/MGWL/QtE-Qt_for_Dlang_and_Forth

